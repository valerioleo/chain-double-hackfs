{
  "address": "0x6a7f1e9Bec96Bd2A54DB824E70B60c24CA878a51",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_baseChain",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseChain",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "eyes",
      "outputs": [
        {
          "internalType": "string",
          "name": "x",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "y",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "width",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "height",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfs",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateIPFSHashForToken",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateSvg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateSvgTraits",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateTokenMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        }
      ],
      "name": "getIPFSLink",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "head",
      "outputs": [
        {
          "internalType": "string",
          "name": "x",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "y",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "width",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "height",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "ipfs",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenConfigs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenConfigsSvg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenUpdateRecords",
      "outputs": [
        {
          "internalType": "address",
          "name": "updater",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string[3]",
          "name": "newConfigs",
          "type": "string[3]"
        },
        {
          "internalType": "uint256[2]",
          "name": "svgConfigs",
          "type": "uint256[2]"
        }
      ],
      "name": "updateTokenConfig",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7e22750d29f19bd2f8dbc46fae8fb5f3807ccaa0ee9ae43ae26885b9d511262c",
  "receipt": {
    "to": null,
    "from": "0x7447b4aD5b6083EC99998D4001A0E54aA0D34d42",
    "contractAddress": "0x6a7f1e9Bec96Bd2A54DB824E70B60c24CA878a51",
    "transactionIndex": 1,
    "gasUsed": "6472426",
    "logsBloom": "0x
    "blockHash": "0xfe58b8fb485f5240e4db040c7f3167c88f51ec4909ad5a7fb57bfa29bb55d2dd",
    "transactionHash": "0x7e22750d29f19bd2f8dbc46fae8fb5f3807ccaa0ee9ae43ae26885b9d511262c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 27301262,
        "transactionHash": "0x7e22750d29f19bd2f8dbc46fae8fb5f3807ccaa0ee9ae43ae26885b9d511262c",
        "address": "0x6a7f1e9Bec96Bd2A54DB824E70B60c24CA878a51",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007447b4ad5b6083ec99998d4001a0e54aa0d34d42"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xfe58b8fb485f5240e4db040c7f3167c88f51ec4909ad5a7fb57bfa29bb55d2dd"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 27301262,
        "transactionHash": "0x7e22750d29f19bd2f8dbc46fae8fb5f3807ccaa0ee9ae43ae26885b9d511262c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007447b4ad5b6083ec99998d4001a0e54aa0d34d42",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003c5c6c2aca4d0b000000000000000000000000000000000000000000000000009701526d05eddb900000000000000000000000000000000000000000000201d6341b605665607c800000000000000000000000000000000000000000000000005aa4e6423ba0d0900000000000000000000000000000000000000000000201d67077cc812fad878",
        "logIndex": 3,
        "blockHash": "0xfe58b8fb485f5240e4db040c7f3167c88f51ec4909ad5a7fb57bfa29bb55d2dd"
      }
    ],
    "blockNumber": 27301262,
    "cumulativeGasUsed": "6543632",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf69186dfBa60DdB133E91E9A4B5673624293d8F8",
    10001,
    "0xf07483E43d292a53f759E9f9f23Be18d42552ee7"
  ],
  "numDeployments": 1,
  "solcInputHash": "d09a36620426f5d870b1ecaa9b53bf64",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_baseChain\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseChain\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eyes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"height\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfs\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateIPFSHashForToken\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateSvg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateSvgTraits\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateTokenMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"}],\"name\":\"getIPFSLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"head\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"x\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"y\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"width\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"height\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfs\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenConfigs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenConfigsSvg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenUpdateRecords\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[3]\",\"name\":\"newConfigs\",\"type\":\"string[3]\"},{\"internalType\":\"uint256[2]\",\"name\":\"svgConfigs\",\"type\":\"uint256[2]\"}],\"name\":\"updateTokenConfig\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Valerio Leo @valerioHQ\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A backend for a ChainDouble NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenController.sol\":\"TokenController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/DateLibrary.sol\":{\"content\":\"pragma solidity ^0.8.10;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.00\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018.\\n//\\n// GNU Lesser General Public License 3.0\\n// https://www.gnu.org/licenses/lgpl-3.0.en.html\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        uint year;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        uint year;\\n        uint month;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        uint fromYear;\\n        uint fromMonth;\\n        uint fromDay;\\n        uint toYear;\\n        uint toMonth;\\n        uint toDay;\\n        (fromYear, fromMonth, fromDay) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (toYear, toMonth, toDay) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        uint fromYear;\\n        uint fromMonth;\\n        uint fromDay;\\n        uint toYear;\\n        uint toMonth;\\n        uint toDay;\\n        (fromYear, fromMonth, fromDay) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (toYear, toMonth, toDay) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x17f7c45f4101aedf2522fb43d5a9de992b90168847d4a3cefcabd417bf3809ee\"},\"contracts/IPFS.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/// @title verifyIPFS\\n/// @author Martin Lundfall (martin.lundfall@gmail.com)\\nlibrary IPFS {\\n  bytes constant prefix1 = hex\\\"0a\\\";\\n  bytes constant prefix2 = hex\\\"080212\\\";\\n  bytes constant postfix = hex\\\"18\\\";\\n  bytes constant sha256MultiHash = hex\\\"1220\\\";\\n  bytes constant ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\\n\\n  /// @dev generates the corresponding IPFS hash (in base 58) to the given string\\n  /// @param contentString The content of the IPFS object\\n  /// @return The IPFS hash in base 58\\n  function generateHash(string memory contentString) public pure returns (bytes memory) {\\n    bytes memory content = bytes(contentString);\\n    bytes memory len = lengthEncode(content.length);\\n    bytes memory len2 = lengthEncode(content.length + 4 + 2*len.length);\\n    return toBase58(concat(sha256MultiHash, toBytes(sha256(abi.encodePacked(prefix1, len2, prefix2, len, content, postfix, len)))));\\n  }\\n\\n  /// @dev Compares an IPFS hash with content\\n  function verifyHash(string memory contentString, string memory hash) internal pure returns (bool) {\\n    return equal(generateHash(contentString), bytes(hash));\\n  }\\n  \\n  /// @dev Converts hex string to base 58\\n  function toBase58(bytes memory source) internal pure returns (bytes memory) {\\n    if (source.length == 0) return new bytes(0);\\n    uint8[] memory digits = new uint8[](64); //TODO: figure out exactly how much is needed\\n    digits[0] = 0;\\n    uint8 digitlength = 1;\\n    for (uint256 i = 0; i<source.length; ++i) {\\n      uint carry = uint8(source[i]);\\n      for (uint256 j = 0; j<digitlength; ++j) {\\n        carry += uint(digits[j]) * 256;\\n        digits[j] = uint8(carry % 58);\\n        carry = carry / 58;\\n      }\\n      \\n      while (carry > 0) {\\n        digits[digitlength] = uint8(carry % 58);\\n        digitlength++;\\n        carry = carry / 58;\\n      }\\n    }\\n    //return digits;\\n    return toAlphabet(reverse(truncate(digits, digitlength)));\\n  }\\n\\n  function lengthEncode(uint256 length) internal pure returns (bytes memory) {\\n    if (length < 128) {\\n      return to_binary(length);\\n    }\\n    else {\\n      return concat(to_binary(length % 128 + 128), to_binary(length / 128));\\n    }\\n  }\\n\\n  function toBytes(bytes32 input) internal pure returns (bytes memory) {\\n    bytes memory output = new bytes(32);\\n    for (uint8 i = 0; i<32; i++) {\\n      output[i] = input[i];\\n    }\\n    return output;\\n  }\\n    \\n  function equal(bytes memory one, bytes memory two) internal pure returns (bool) {\\n    if (!(one.length == two.length)) {\\n      return false;\\n    }\\n    for (uint256 i = 0; i<one.length; i++) {\\n      if (!(one[i] == two[i])) {\\n\\treturn false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  function truncate(uint8[] memory array, uint8 length) internal pure returns (uint8[] memory) {\\n    uint8[] memory output = new uint8[](length);\\n    for (uint256 i = 0; i<length; i++) {\\n        output[i] = array[i];\\n    }\\n    return output;\\n  }\\n  \\n  function reverse(uint8[] memory input) internal pure returns (uint8[] memory) {\\n    uint8[] memory output = new uint8[](input.length);\\n    for (uint256 i = 0; i<input.length; i++) {\\n        output[i] = input[input.length-1-i];\\n    }\\n    return output;\\n  }\\n  \\n  function toAlphabet(uint8[] memory indices) internal pure returns (bytes memory) {\\n    bytes memory output = new bytes(indices.length);\\n    for (uint256 i = 0; i<indices.length; i++) {\\n        output[i] = ALPHABET[indices[i]];\\n    }\\n    return output;\\n  }\\n\\n  function concat(bytes memory byteArray, bytes memory byteArray2) internal pure returns (bytes memory) {\\n    bytes memory returnArray = new bytes(byteArray.length + byteArray2.length);\\n    uint i = 0;\\n    for (i; i < byteArray.length; i++) {\\n      returnArray[i] = byteArray[i];\\n    }\\n    for (i; i < (byteArray.length + byteArray2.length); i++) {\\n      returnArray[i] = byteArray2[i - byteArray.length];\\n    }\\n    return returnArray;\\n  }\\n    \\n  function to_binary(uint256 x) internal pure returns (bytes memory) {\\n    if (x == 0) {\\n      return new bytes(0);\\n    }\\n    else {\\n      bytes1 s = bytes1(uint8(x % 256));\\n      bytes memory r = new bytes(1);\\n      r[0] = s;\\n      return concat(to_binary(x / 256), r);\\n    }\\n  }\\n}\",\"keccak256\":\"0xf02136ea5bbc2ee194a091bbe24ae515618e032647e25a6dbdd4db97f9820592\"},\"contracts/TokenController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\nimport \\\"./DateLibrary.sol\\\";\\n\\nimport \\\"./lzApp/NonblockingLzApp.sol\\\";\\nimport \\\"./IPFS.sol\\\";\\n\\n/// @title A backend for a ChainDouble NFT\\n/// @author Valerio Leo @valerioHQ\\ncontract TokenController is NonblockingLzApp {\\n  using Strings for uint256;\\n  address public baseToken;\\n  uint16 public baseChain;\\n\\n  // tokenId => [config, config, ...]\\n  // first 3 traits as strings\\n  mapping(uint256 => string[3]) public tokenConfigs;\\n  mapping(uint256 => uint256[2]) public tokenConfigsSvg;\\n  struct UpdateRecord {\\n    address updater;\\n    uint256 timestamp;\\n  }\\n\\n  struct SvgTrait {\\n    string x;\\n    string y;\\n    string width;\\n    string height;\\n    string ipfs;\\n    string name;\\n  }\\n\\n  SvgTrait[] public eyes;\\n  SvgTrait[] public head;\\n\\n  mapping(uint256 => UpdateRecord) public tokenUpdateRecords;\\n  string[] traitsTypes;\\n\\n  constructor (address _endpoint, uint16 _baseChain, address _baseToken) NonblockingLzApp(_endpoint) {\\n    baseToken = _baseToken;\\n    baseChain = _baseChain;\\n\\n    traitsTypes = ['backgroundColor', 'borderRadius', 'text', 'head', 'eyes'];\\n\\n    head.push(SvgTrait({\\n      x: '',\\n      y: '',\\n      width: '',\\n      height: '',\\n      ipfs: '',\\n      name: ''\\n    }));\\n    \\n    head.push(SvgTrait({\\n      x: '768',\\n      y: '512',\\n      width: '522',\\n      height: '1169',\\n      ipfs: 'bafkreidinklkjqqyvpo7x5uz4qpohrpv2ba56vnuaxnscaqs4p7cyleu7u',\\n      name: 'Soldier Helmet'\\n    }));\\n    \\n    head.push(SvgTrait({\\n      x: '737',\\n      y: '497',\\n      width: '590',\\n      height: '1169',\\n      ipfs: 'bafkreidfvixz7xnfuvucyfkxnchnnqocyw7ezv5w7nz4kimzmeexsohcaa',\\n      name: 'Fisherman Hat'\\n    }));\\n\\n    head.push(SvgTrait({\\n      x: '725',\\n      y: '480',\\n      width: '590',\\n      height: '1169',\\n      ipfs: 'bafkreicjopajvzjh3at5f5ohtctndont4mlgbfmxgpbry4lbfy63e2ky4m',\\n      name: 'Crown'\\n    }));\\n\\n    eyes.push(SvgTrait({\\n      x: '',\\n      y: '',\\n      width: '',\\n      height: '',\\n      ipfs: '',\\n      name: ''\\n    }));\\n\\n    eyes.push(SvgTrait({\\n      x: '905',\\n      y: '700',\\n      width: '590',\\n      height: '1169',\\n      ipfs: 'bafkreihh4ghqvkp5erg5tjk4tcajo2zfbkyaj72eevtctvmmcdpzi3o3c4',\\n      name: 'Laser Stare'\\n    }));\\n\\n    eyes.push(SvgTrait({\\n      x: '706',\\n      y: '670',\\n      width: '590',\\n      height: '1169',\\n      ipfs: 'bafkreih4am3ok4jwe42htfq3xfnvcwnvczp2fihnxra6aomkgdoojxbawy',\\n      name: 'Tough Life Glasses'\\n    }));\\n  }\\n\\n  function getIPFSLink(string memory _ipfsHash) public pure returns (string memory) {\\n    return string(abi.encodePacked('https://ipfs.io/ipfs/', _ipfsHash));\\n  }\\n\\n  function generateTokenMetadata(uint256 tokenId) public view virtual returns(string memory) {\\n    string memory image = Base64.encode(bytes(generateSvg(tokenId)));\\n    string memory traits = getTraits(tokenId);\\n\\n    return string(abi.encodePacked(\\n      bytes(abi.encodePacked(\\n        '{',\\n          '\\\"name\\\":\\\"ChainDouble ', tokenId.toString(),'\\\",',\\n          '\\\"description\\\":\\\"NONAME: This is the description\\\",',\\n          '\\\"animation_url\\\": \\\"data:image/svg+xml;base64,',image,'\\\",',\\n          '\\\"attributes\\\": ', traits,\\n        '}'\\n      ))\\n    ));\\n  }\\n\\n  function getTraits(uint256 tokenId) private view returns (string memory) {\\n    bytes memory layers = abi.encodePacked('[');\\n\\n    // first 3 are free text\\n    for(uint i = 0 ; i < 3 ; i++) {\\n      string memory traitType = traitsTypes[i];\\n      string memory traitValue = tokenConfigs[tokenId][i];\\n\\n      layers = abi.encodePacked(\\n        layers, '{\\\"trait_type\\\":\\\"',traitType,'\\\",\\\"value\\\":\\\"',traitValue,'\\\"},'\\n        );\\n    }\\n\\n    // last two are svg presets\\n    // head\\n    layers = abi.encodePacked(\\n      layers,\\n      '{\\\"trait_type\\\":\\\"head\\\",\\\"value\\\":\\\"',head[tokenConfigsSvg[tokenId][0]].name,'\\\"},'\\n    );\\n\\n    // eyes\\n    layers = abi.encodePacked(\\n      layers,\\n      '{\\\"trait_type\\\":\\\"eyes\\\",\\\"value\\\":\\\"',eyes[tokenConfigsSvg[tokenId][1]].name,'\\\"}'\\n    );\\n\\n    layers = abi.encodePacked(layers, ']');\\n\\n    return string(layers);\\n  }\\n\\n  function updateTokenConfig(uint256 tokenId, string[3] calldata newConfigs, uint256[2] calldata svgConfigs) public payable {\\n    string[3] storage existingConfigs = tokenConfigs[tokenId];\\n    uint256[2] storage existingSvgConfigs = tokenConfigsSvg[tokenId];\\n\\n    for(uint i = 0 ; i < newConfigs.length ; i++) {\\n      existingConfigs[i] = newConfigs[i];\\n    }\\n\\n    existingSvgConfigs[0] = svgConfigs[0];\\n    existingSvgConfigs[1] = svgConfigs[1];\\n\\n    tokenUpdateRecords[tokenId].updater = msg.sender;\\n    tokenUpdateRecords[tokenId].timestamp = block.timestamp;\\n\\n    bytes memory CID = generateIPFSHashForToken(tokenId);\\n\\n    _notifyToken(tokenId, CID);\\n  }\\n\\n  function generateSvgTraits(uint256 tokenId) public view returns (string memory) {\\n    SvgTrait memory headSetting = head[tokenConfigsSvg[tokenId][0]]; \\n    SvgTrait memory eyesSetting = eyes[tokenConfigsSvg[tokenId][1]]; \\n\\n    string memory svg = string(abi.encodePacked(\\n      '<image  x=\\\"', headSetting.x, '\\\" y=\\\"', headSetting.y, '\\\" width=\\\"', headSetting.width,'\\\" height=\\\"',headSetting.height, '\\\" href=\\\"', getIPFSLink(headSetting.ipfs),'\\\"/>',\\n      '<image  x=\\\"', eyesSetting.x, '\\\" y=\\\"', eyesSetting.y, '\\\" width=\\\"', eyesSetting.width,'\\\" height=\\\"',eyesSetting.height, '\\\" href=\\\"', getIPFSLink(eyesSetting.ipfs),'\\\"/>'\\n    ));\\n\\n    return svg;\\n  }\\n\\n  function generateSvg(uint256 tokenId) public view returns (string memory) {\\n    string memory backgroundColor = tokenConfigs[tokenId][0];\\n    string memory borderRadius = tokenConfigs[tokenId][1];\\n    string memory text = tokenConfigs[tokenId][2];\\n\\n    // string memory updater = uint256(uint160(address(tokenUpdateRecords[tokenId].updater))).toHexString();\\n    // uint256 timestamp = tokenUpdateRecords[tokenId].timestamp;\\n\\n    // (uint year, uint month, uint day) = DateLibrary.timestampToDate(timestamp);\\n\\n    // string memory date = string(abi.encodePacked(year.toString(), \\\"-\\\", month.toString(), \\\"-\\\", day.toString()));\\n\\n    string memory svg = string(abi.encodePacked(\\n      '<svg width=\\\"1990\\\" height=\\\"1990\\\" viewBox=\\\"0 0 1990 1990\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">'\\n        '<g>'\\n          '<rect width=\\\"1990\\\" height=\\\"1990\\\" fill=\\\"gainsboro\\\"/>'\\n          '<text fill=\\\"orange\\\" xml-space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Futura\\\" font-size=\\\"242\\\" letter-spacing=\\\"-0.08em\\\"><tspan x=\\\"67\\\" y=\\\"330\\\">ChainDouble</tspan></text>'\\n          '<text fill=\\\"black\\\" xml-space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Futura\\\" font-size=\\\"107\\\" letter-spacing=\\\"-0.01em\\\"><tspan x=\\\"67\\\" y=\\\"600\\\">Customise on </tspan></text>'\\n          '<text fill=\\\"black\\\" xml-space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Futura\\\" font-size=\\\"107\\\" letter-spacing=\\\"-0.01em\\\" text-decoration=\\\"underline\\\"><tspan x=\\\"720\\\" y=\\\"600\\\">chaindouble.xyz</tspan></text>'\\n          '<rect rx=\\\"', borderRadius, '\\\" ry=\\\"', borderRadius, '\\\" x=\\\"467\\\" y=\\\"792\\\" width=\\\"1055\\\" height=\\\"1055\\\" style=\\\"fill:rgb(', backgroundColor, ');stroke-width:3;stroke:rgb(0,0,0)\\\"/>'\\n\\n          '<foreignObject x=\\\"513\\\" y=\\\"715.25\\\" width=\\\"900\\\" height=\\\"850\\\" font-size=\\\"107\\\">'\\n            '<p xmlns=\\\"http://www.w3.org/1999/xhtml\\\" style=\\\"font-family: Futura\\\">', text, '</p>'\\n          '</foreignObject>'\\n          \\n          // '<text fill=\\\"black\\\" xml-space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"monospace\\\" font-size=\\\"35\\\" letter-spacing=\\\"-0.01em\\\"><tspan x=\\\"513\\\" y=\\\"1752.59\\\">updated at: ', date, '</tspan><tspan x=\\\"513\\\" y=\\\"1798.59\\\">by: ', updater, '</tspan></text>',\\n        \\n          '<image  x=\\\"706\\\" y=\\\"806\\\" width=\\\"590\\\" height=\\\"1169\\\" href=\\\"https://ipfs.io/ipfs/bafybeidkxprhksufy53aynn2y4dnpmfsv4q4gncz4hr4k66vleflsmetdm\\\"/>',\\n\\n          generateSvgTraits(tokenId),\\n        '</g>'\\n      '</svg>'\\n    ));\\n\\n    return svg;\\n  }\\n\\n  function generateIPFSHashForToken(uint256 tokenId) public view returns (bytes memory) {\\n    string memory tokenRawMetadata = generateTokenMetadata(tokenId);\\n\\n    return IPFS.generateHash(tokenRawMetadata);\\n  }\\n\\n  function estimateFee() public view returns (uint256) {\\n    uint16 version = 1;\\n    uint gasForDestinationLzReceive = 350000;\\n    bytes memory adapterParams = abi.encodePacked(version, gasForDestinationLzReceive);\\n\\n    bytes memory CID = bytes(string('QmPgNoTsL8DvH7fC2KShf3Hs6wbzYghZ23XLGTbvcfpmiC'));\\n\\n    (uint messageFee, ) = lzEndpoint.estimateFees(baseChain, address(this), CID, false, adapterParams);\\n\\n    return messageFee;\\n  }\\n\\n  // MESSAGING\\n  function _notifyToken(uint256 tokenId, bytes memory payload) private {\\n    // use adapterParams v1 to specify more gas for the destination\\n    uint16 version = 1;\\n    uint gasForDestinationLzReceive = 350000;\\n    bytes memory adapterParams = abi.encodePacked(version, gasForDestinationLzReceive);\\n    \\n    // get the fees we need to pay to LayerZero for message delivery\\n    // (uint messageFee, ) = lzEndpoint.estimateFees(baseChain, address(this), payload, false, adapterParams);\\n\\n    // send LayerZero message\\n    lzEndpoint.send{value: msg.value}( // {value: messageFee} will be paid out of this contract!\\n      baseChain, // destination chainId\\n      abi.encodePacked(baseToken), // destination address of PingPong contract\\n      abi.encodePacked(tokenId, payload), // abi.encode()'ed bytes\\n      payable(msg.sender), // (msg.sender will be this contract) refund address (LayerZero will refund any extra gas back to caller of send()\\n      address(0x0), // future param, unused for this example\\n      adapterParams // v1 adapterParams, specify custom destination gas qty\\n    );\\n  }\\n\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64, /*_nonce*/\\n        bytes memory _payload\\n    ) internal override {\\n        // // use assembly to extract the address from the bytes memory parameter\\n        // address sendBackToAddress;\\n        // assembly {\\n        //     sendBackToAddress := mload(add(_srcAddress, 20))\\n        // }\\n\\n        // // decode the number of pings sent thus far\\n        // uint pings = abi.decode(_payload, (uint));\\n\\n        // // *pong* back to the other side\\u00e5\\n        // ping(_srcChainId, sendBackToAddress, pings);\\n    }\\n\\n    // allow this contract to receive ether\\n    receive() external payable {}\\n\\n}\\n\",\"keccak256\":\"0xf1b165ef36b882a4cff243f9b63127afb4be2a506b5cea4744a59a5eaf200a1b\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xe9617a9f6db351b6ac4c9d5b1097798af59ad7f813e370e8cf69bb44addd8548\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x909bf72002c91806f39a64172c12b4188219e8649deefbe8d862604d4f9d3faf\",\"license\":\"MIT\"},\"contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xe3e50134e39aa3c0f916447d36367970c6e4df972d488b794227e0b052ce80d5\",\"license\":\"MIT\"},\"contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n\\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        lzEndpoint.send{value: msg.value}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // allow owner to set it multiple times.\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x2cba02b2b9bb6d9a734f97c57344ad8ce0062559286526e3b652f8a81116fc4a\",\"license\":\"MIT\"},\"contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        // try-catch all errors/exceptions\\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\\n            // do nothing\\n        } catch {\\n            // error / exception\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\n        }\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n}\\n\",\"keccak256\":\"0x4c09b3d1a878be223cf9550a6e533a536799d8601f977f6f86077aa304713f84\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101d05760003560e01c80637533d788116100f7578063c98734c811610095578063eb8d72b711610064578063eb8d72b7146106df578063f2fde38b14610708578063f5ecbdbc14610731578063fb6ad1491461076e576101d7565b8063c98734c814610620578063cbed8b9c1461065d578063d1deba1f14610686578063e3041da3146106a2576101d7565b8063a3053dd5116100d1578063a3053dd51461054b578063b353aaa71461058d578063bc921dc2146105b8578063c55dae63146105f5576101d7565b80637533d788146104b85780637f18dc85146104f55780638da5cb5b14610520576101d7565b80633d8b38f61161016f57806366ad5c8a1161013e57806366ad5c8a146103fd5780636a918c9214610426578063713b94ad14610464578063715018a6146104a1576101d7565b80633d8b38f61461033e57806342d65a8d1461037b5780635b8c41e6146103a457806361f50a69146103e1576101d7565b80630826e37b116101ab5780630826e37b146102595780630d416e961461029b57806310ddb137146102d857806314eb249814610301576101d7565b80621d3567146101dc578063070426561461020557806307e0db1714610230576101d7565b366101d757005b600080fd5b3480156101e857600080fd5b5061020360048036038101906101fe91906136fe565b6107ab565b005b34801561021157600080fd5b5061021a610958565b60405161022791906137ac565b60405180910390f35b34801561023c57600080fd5b50610257600480360381019061025291906137c7565b61096c565b005b34801561026557600080fd5b50610280600480360381019061027b919061382a565b610a76565b604051610292969594939291906138df565b60405180910390f35b3480156102a757600080fd5b506102c260048036038101906102bd919061382a565b610df2565b6040516102cf919061396a565b60405180910390f35b3480156102e457600080fd5b506102ff60048036038101906102fa91906137c7565b610e6a565b005b34801561030d57600080fd5b5061032860048036038101906103239190613a2d565b610f74565b604051610335919061396a565b60405180910390f35b34801561034a57600080fd5b5061036560048036038101906103609190613ad6565b610f9d565b6040516103729190613b51565b60405180910390f35b34801561038757600080fd5b506103a2600480360381019061039d9190613ad6565b611071565b005b3480156103b057600080fd5b506103cb60048036038101906103c69190613b6c565b611181565b6040516103d89190613bf4565b60405180910390f35b6103fb60048036038101906103f69190613c53565b6111c9565b005b34801561040957600080fd5b50610424600480360381019061041f91906136fe565b61134f565b005b34801561043257600080fd5b5061044d6004803603810190610448919061382a565b6113d6565b60405161045b929190613d12565b60405180910390f35b34801561047057600080fd5b5061048b6004803603810190610486919061382a565b61141a565b604051610498919061396a565b60405180910390f35b3480156104ad57600080fd5b506104b6611c1d565b005b3480156104c457600080fd5b506104df60048036038101906104da91906137c7565b611ca5565b6040516104ec9190613d90565b60405180910390f35b34801561050157600080fd5b5061050a611d45565b6040516105179190613db2565b60405180910390f35b34801561052c57600080fd5b50610535611e59565b6040516105429190613dcd565b60405180910390f35b34801561055757600080fd5b50610572600480360381019061056d919061382a565b611e82565b604051610584969594939291906138df565b60405180910390f35b34801561059957600080fd5b506105a26121fe565b6040516105af9190613e47565b60405180910390f35b3480156105c457600080fd5b506105df60048036038101906105da919061382a565b612222565b6040516105ec919061396a565b60405180910390f35b34801561060157600080fd5b5061060a612480565b6040516106179190613dcd565b60405180910390f35b34801561062c57600080fd5b5061064760048036038101906106429190613e62565b6124a6565b6040516106549190613db2565b60405180910390f35b34801561066957600080fd5b50610684600480360381019061067f9190613ea2565b6124ce565b005b6106a0600480360381019061069b91906136fe565b6125e4565b005b3480156106ae57600080fd5b506106c960048036038101906106c49190613e62565b61274b565b6040516106d6919061396a565b60405180910390f35b3480156106eb57600080fd5b5061070660048036038101906107019190613ad6565b6127fb565b005b34801561071457600080fd5b5061072f600480360381019061072a9190613f56565b6128e2565b005b34801561073d57600080fd5b5061075860048036038101906107539190613f83565b6129da565b6040516107659190613d90565b60405180910390f35b34801561077a57600080fd5b506107956004803603810190610790919061382a565b612a8b565b6040516107a29190613d90565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166107ea612b1f565b73ffffffffffffffffffffffffffffffffffffffff1614610840576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083790614036565b60405180910390fd5b6000600160008661ffff1661ffff168152602001908152602001600020805461086890614085565b80601f016020809104026020016040519081016040528092919081815260200182805461089490614085565b80156108e15780601f106108b6576101008083540402835291602001916108e1565b820191906000526020600020905b8154815290600101906020018083116108c457829003601f168201915b5050505050905080518451148015610906575080805190602001208480519060200120145b610945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093c90614129565b60405180910390fd5b61095185858585612b27565b5050505050565b600360149054906101000a900461ffff1681565b610974612b1f565b73ffffffffffffffffffffffffffffffffffffffff16610992611e59565b73ffffffffffffffffffffffffffffffffffffffff16146109e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109df90614195565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166307e0db17826040518263ffffffff1660e01b8152600401610a4191906137ac565b600060405180830381600087803b158015610a5b57600080fd5b505af1158015610a6f573d6000803e3d6000fd5b5050505050565b60078181548110610a8657600080fd5b9060005260206000209060060201600091509050806000018054610aa990614085565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad590614085565b8015610b225780601f10610af757610100808354040283529160200191610b22565b820191906000526020600020905b815481529060010190602001808311610b0557829003601f168201915b505050505090806001018054610b3790614085565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6390614085565b8015610bb05780601f10610b8557610100808354040283529160200191610bb0565b820191906000526020600020905b815481529060010190602001808311610b9357829003601f168201915b505050505090806002018054610bc590614085565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf190614085565b8015610c3e5780601f10610c1357610100808354040283529160200191610c3e565b820191906000526020600020905b815481529060010190602001808311610c2157829003601f168201915b505050505090806003018054610c5390614085565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7f90614085565b8015610ccc5780601f10610ca157610100808354040283529160200191610ccc565b820191906000526020600020905b815481529060010190602001808311610caf57829003601f168201915b505050505090806004018054610ce190614085565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0d90614085565b8015610d5a5780601f10610d2f57610100808354040283529160200191610d5a565b820191906000526020600020905b815481529060010190602001808311610d3d57829003601f168201915b505050505090806005018054610d6f90614085565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9b90614085565b8015610de85780601f10610dbd57610100808354040283529160200191610de8565b820191906000526020600020905b815481529060010190602001808311610dcb57829003601f168201915b5050505050905086565b60606000610e07610e0284612222565b612c46565b90506000610e1484612dbf565b9050610e1f84613092565b8282604051602001610e3393929190614451565b604051602081830303815290604052604051602001610e529190614516565b60405160208183030381529060405292505050919050565b610e72612b1f565b73ffffffffffffffffffffffffffffffffffffffff16610e90611e59565b73ffffffffffffffffffffffffffffffffffffffff1614610ee6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edd90614195565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166310ddb137826040518263ffffffff1660e01b8152600401610f3f91906137ac565b600060405180830381600087803b158015610f5957600080fd5b505af1158015610f6d573d6000803e3d6000fd5b5050505050565b606081604051602001610f879190614579565b6040516020818303038152906040529050919050565b600080600160008661ffff1661ffff1681526020019081526020016000208054610fc690614085565b80601f0160208091040260200160405190810160405280929190818152602001828054610ff290614085565b801561103f5780601f106110145761010080835404028352916020019161103f565b820191906000526020600020905b81548152906001019060200180831161102257829003601f168201915b5050505050905083836040516110569291906145c0565b60405180910390208180519060200120149150509392505050565b611079612b1f565b73ffffffffffffffffffffffffffffffffffffffff16611097611e59565b73ffffffffffffffffffffffffffffffffffffffff16146110ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e490614195565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342d65a8d8484846040518463ffffffff1660e01b815260040161114a93929190614606565b600060405180830381600087803b15801561116457600080fd5b505af1158015611178573d6000803e3d6000fd5b50505050505050565b60026020528260005260406000208280516020810182018051848252602083016020850120818352809550505050505060205280600052604060002060009250925050505481565b6000600460008581526020019081526020016000209050600060056000868152602001908152602001600020905060005b600381101561125b5784816003811061121657611215614638565b5b6020028101906112269190614676565b84836003811061123957611238614638565b5b019190611247929190613401565b50808061125390614708565b9150506111fa565b50826000600281106112705761126f614638565b5b60200201358160006002811061128957611288614638565b5b0181905550826001600281106112a2576112a1614638565b5b6020020135816001600281106112bb576112ba614638565b5b0181905550336008600087815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426008600087815260200190815260200160002060010181905550600061133b86612a8b565b905061134786826131f3565b505050505050565b3073ffffffffffffffffffffffffffffffffffffffff1661136e612b1f565b73ffffffffffffffffffffffffffffffffffffffff16146113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb906147c3565b60405180910390fd5b6113d084848484613337565b50505050565b60086020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b6060600060076005600085815260200190815260200160002060006002811061144657611445614638565b5b01548154811061145957611458614638565b5b90600052602060002090600602016040518060c001604052908160008201805461148290614085565b80601f01602080910402602001604051908101604052809291908181526020018280546114ae90614085565b80156114fb5780601f106114d0576101008083540402835291602001916114fb565b820191906000526020600020905b8154815290600101906020018083116114de57829003601f168201915b5050505050815260200160018201805461151490614085565b80601f016020809104026020016040519081016040528092919081815260200182805461154090614085565b801561158d5780601f106115625761010080835404028352916020019161158d565b820191906000526020600020905b81548152906001019060200180831161157057829003601f168201915b505050505081526020016002820180546115a690614085565b80601f01602080910402602001604051908101604052809291908181526020018280546115d290614085565b801561161f5780601f106115f45761010080835404028352916020019161161f565b820191906000526020600020905b81548152906001019060200180831161160257829003601f168201915b5050505050815260200160038201805461163890614085565b80601f016020809104026020016040519081016040528092919081815260200182805461166490614085565b80156116b15780601f10611686576101008083540402835291602001916116b1565b820191906000526020600020905b81548152906001019060200180831161169457829003601f168201915b505050505081526020016004820180546116ca90614085565b80601f01602080910402602001604051908101604052809291908181526020018280546116f690614085565b80156117435780601f1061171857610100808354040283529160200191611743565b820191906000526020600020905b81548152906001019060200180831161172657829003601f168201915b5050505050815260200160058201805461175c90614085565b80601f016020809104026020016040519081016040528092919081815260200182805461178890614085565b80156117d55780601f106117aa576101008083540402835291602001916117d5565b820191906000526020600020905b8154815290600101906020018083116117b857829003601f168201915b5050505050815250509050600060066005600086815260200190815260200160002060016002811061180a57611809614638565b5b01548154811061181d5761181c614638565b5b90600052602060002090600602016040518060c001604052908160008201805461184690614085565b80601f016020809104026020016040519081016040528092919081815260200182805461187290614085565b80156118bf5780601f10611894576101008083540402835291602001916118bf565b820191906000526020600020905b8154815290600101906020018083116118a257829003601f168201915b505050505081526020016001820180546118d890614085565b80601f016020809104026020016040519081016040528092919081815260200182805461190490614085565b80156119515780601f1061192657610100808354040283529160200191611951565b820191906000526020600020905b81548152906001019060200180831161193457829003601f168201915b5050505050815260200160028201805461196a90614085565b80601f016020809104026020016040519081016040528092919081815260200182805461199690614085565b80156119e35780601f106119b8576101008083540402835291602001916119e3565b820191906000526020600020905b8154815290600101906020018083116119c657829003601f168201915b505050505081526020016003820180546119fc90614085565b80601f0160208091040260200160405190810160405280929190818152602001828054611a2890614085565b8015611a755780601f10611a4a57610100808354040283529160200191611a75565b820191906000526020600020905b815481529060010190602001808311611a5857829003601f168201915b50505050508152602001600482018054611a8e90614085565b80601f0160208091040260200160405190810160405280929190818152602001828054611aba90614085565b8015611b075780601f10611adc57610100808354040283529160200191611b07565b820191906000526020600020905b815481529060010190602001808311611aea57829003601f168201915b50505050508152602001600582018054611b2090614085565b80601f0160208091040260200160405190810160405280929190818152602001828054611b4c90614085565b8015611b995780601f10611b6e57610100808354040283529160200191611b99565b820191906000526020600020905b815481529060010190602001808311611b7c57829003601f168201915b505050505081525050905060008260000151836020015184604001518560600151611bc78760800151610f74565b8660000151876020015188604001518960600151611be88b60800151610f74565b604051602001611c019a999897969594939291906149ab565b6040516020818303038152906040529050809350505050919050565b611c25612b1f565b73ffffffffffffffffffffffffffffffffffffffff16611c43611e59565b73ffffffffffffffffffffffffffffffffffffffff1614611c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9090614195565b60405180910390fd5b611ca3600061333d565b565b60016020528060005260406000206000915090508054611cc490614085565b80601f0160208091040260200160405190810160405280929190818152602001828054611cf090614085565b8015611d3d5780601f10611d1257610100808354040283529160200191611d3d565b820191906000526020600020905b815481529060010190602001808311611d2057829003601f168201915b505050505081565b60008060019050600062055730905060008282604051602001611d69929190614b12565b604051602081830303815290604052905060006040518060600160405280602e8152602001615db3602e9139905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340a7bb10600360149054906101000a900461ffff1630856000886040518663ffffffff1660e01b8152600401611e0b959493929190614b3e565b6040805180830381865afa158015611e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4b9190614bb4565b509050809550505050505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60068181548110611e9257600080fd5b9060005260206000209060060201600091509050806000018054611eb590614085565b80601f0160208091040260200160405190810160405280929190818152602001828054611ee190614085565b8015611f2e5780601f10611f0357610100808354040283529160200191611f2e565b820191906000526020600020905b815481529060010190602001808311611f1157829003601f168201915b505050505090806001018054611f4390614085565b80601f0160208091040260200160405190810160405280929190818152602001828054611f6f90614085565b8015611fbc5780601f10611f9157610100808354040283529160200191611fbc565b820191906000526020600020905b815481529060010190602001808311611f9f57829003601f168201915b505050505090806002018054611fd190614085565b80601f0160208091040260200160405190810160405280929190818152602001828054611ffd90614085565b801561204a5780601f1061201f5761010080835404028352916020019161204a565b820191906000526020600020905b81548152906001019060200180831161202d57829003601f168201915b50505050509080600301805461205f90614085565b80601f016020809104026020016040519081016040528092919081815260200182805461208b90614085565b80156120d85780601f106120ad576101008083540402835291602001916120d8565b820191906000526020600020905b8154815290600101906020018083116120bb57829003601f168201915b5050505050908060040180546120ed90614085565b80601f016020809104026020016040519081016040528092919081815260200182805461211990614085565b80156121665780601f1061213b57610100808354040283529160200191612166565b820191906000526020600020905b81548152906001019060200180831161214957829003601f168201915b50505050509080600501805461217b90614085565b80601f01602080910402602001604051908101604052809291908181526020018280546121a790614085565b80156121f45780601f106121c9576101008083540402835291602001916121f4565b820191906000526020600020905b8154815290600101906020018083116121d757829003601f168201915b5050505050905086565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060006004600084815260200190815260200160002060006003811061224c5761224b614638565b5b01805461225890614085565b80601f016020809104026020016040519081016040528092919081815260200182805461228490614085565b80156122d15780601f106122a6576101008083540402835291602001916122d1565b820191906000526020600020905b8154815290600101906020018083116122b457829003601f168201915b50505050509050600060046000858152602001908152602001600020600160038110612300576122ff614638565b5b01805461230c90614085565b80601f016020809104026020016040519081016040528092919081815260200182805461233890614085565b80156123855780601f1061235a57610100808354040283529160200191612385565b820191906000526020600020905b81548152906001019060200180831161236857829003601f168201915b505050505090506000600460008681526020019081526020016000206002600381106123b4576123b3614638565b5b0180546123c090614085565b80601f01602080910402602001604051908101604052809291908181526020018280546123ec90614085565b80156124395780601f1061240e57610100808354040283529160200191612439565b820191906000526020600020905b81548152906001019060200180831161241c57829003601f168201915b5050505050905060008283858461244f8a61141a565b60405160200161246395949392919061528d565b604051602081830303815290604052905080945050505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560205281600052604060002081600281106124c257600080fd5b01600091509150505481565b6124d6612b1f565b73ffffffffffffffffffffffffffffffffffffffff166124f4611e59565b73ffffffffffffffffffffffffffffffffffffffff161461254a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254190614195565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cbed8b9c86868686866040518663ffffffff1660e01b81526004016125ab95949392919061531a565b600060405180830381600087803b1580156125c557600080fd5b505af11580156125d9573d6000803e3d6000fd5b505050505050505050565b6000600260008661ffff1661ffff1681526020019081526020016000208460405161260f9190614516565b908152602001604051809103902060008467ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000205490506000801b81141561268b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612682906153da565b60405180910390fd5b808280519060200120146126d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126cb9061546c565b60405180910390fd5b6000801b600260008761ffff1661ffff168152602001908152602001600020856040516127019190614516565b908152602001604051809103902060008567ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000208190555061274485858585613337565b5050505050565b6004602052816000526040600020816003811061276757600080fd5b0160009150915050805461277a90614085565b80601f01602080910402602001604051908101604052809291908181526020018280546127a690614085565b80156127f35780601f106127c8576101008083540402835291602001916127f3565b820191906000526020600020905b8154815290600101906020018083116127d657829003601f168201915b505050505081565b612803612b1f565b73ffffffffffffffffffffffffffffffffffffffff16612821611e59565b73ffffffffffffffffffffffffffffffffffffffff1614612877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286e90614195565b60405180910390fd5b8181600160008661ffff1661ffff16815260200190815260200160002091906128a1929190613487565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516128d593929190614606565b60405180910390a1505050565b6128ea612b1f565b73ffffffffffffffffffffffffffffffffffffffff16612908611e59565b73ffffffffffffffffffffffffffffffffffffffff161461295e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295590614195565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c5906154fe565b60405180910390fd5b6129d78161333d565b50565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5ecbdbc868630866040518563ffffffff1660e01b8152600401612a3b949392919061551e565b600060405180830381865afa158015612a58573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612a8191906155d3565b9050949350505050565b60606000612a9883610df2565b905073__$46a46e6dfe3a8bce26e7f905854de2c4d8$__63b063152a826040518263ffffffff1660e01b8152600401612ad19190615666565b600060405180830381865af4158015612aee573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612b1791906155d3565b915050919050565b600033905090565b3073ffffffffffffffffffffffffffffffffffffffff166366ad5c8a858585856040518563ffffffff1660e01b8152600401612b669493929190615697565b600060405180830381600087803b158015612b8057600080fd5b505af1925050508015612b91575060015b612c3f578080519060200120600260008661ffff1661ffff16815260200190815260200160002084604051612bc69190614516565b908152602001604051809103902060008467ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020819055507fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d84848484604051612c329493929190615697565b60405180910390a1612c40565b5b50505050565b6060600082511415612c6957604051806020016040528060008152509050612dba565b6000604051806060016040528060408152602001615d736040913990506000600360028551612c9891906156ea565b612ca2919061576f565b6004612cae91906157a0565b90506000602082612cbf91906156ea565b67ffffffffffffffff811115612cd857612cd7613593565b5b6040519080825280601f01601f191660200182016040528015612d0a5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015612d79576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050612d1e565b600389510660018114612d935760028114612da357612dae565b613d3d60f01b6002830352612dae565b603d60f81b60018303525b50505050508093505050505b919050565b60606000604051602001612dd290615846565b604051602081830303815290604052905060005b6003811015612f8857600060098281548110612e0557612e04614638565b5b906000526020600020018054612e1a90614085565b80601f0160208091040260200160405190810160405280929190818152602001828054612e4690614085565b8015612e935780601f10612e6857610100808354040283529160200191612e93565b820191906000526020600020905b815481529060010190602001808311612e7657829003601f168201915b505050505090506000600460008781526020019081526020016000208360038110612ec157612ec0614638565b5b018054612ecd90614085565b80601f0160208091040260200160405190810160405280929190818152602001828054612ef990614085565b8015612f465780601f10612f1b57610100808354040283529160200191612f46565b820191906000526020600020905b815481529060010190602001808311612f2957829003601f168201915b50505050509050838282604051602001612f629392919061593f565b604051602081830303815290604052935050508080612f8090614708565b915050612de6565b5080600760056000868152602001908152602001600020600060028110612fb257612fb1614638565b5b015481548110612fc557612fc4614638565b5b9060005260206000209060060201600501604051602001612fe7929190615a71565b60405160208183030381529060405290508060066005600086815260200190815260200160002060016002811061302157613020614638565b5b01548154811061303457613033614638565b5b9060005260206000209060060201600501604051602001613056929190615b43565b6040516020818303038152906040529050806040516020016130789190615bc9565b604051602081830303815290604052905080915050919050565b606060008214156130da576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506131ee565b600082905060005b6000821461310c5780806130f590614708565b915050600a82613105919061576f565b91506130e2565b60008167ffffffffffffffff81111561312857613127613593565b5b6040519080825280601f01601f19166020018201604052801561315a5781602001600182028036833780820191505090505b5090505b600085146131e7576001826131739190615beb565b9150600a856131829190615c1f565b603061318e91906156ea565b60f81b8183815181106131a4576131a3614638565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856131e0919061576f565b945061315e565b8093505050505b919050565b600060019050600062055730905060008282604051602001613216929190614b12565b60405160208183030381529060405290507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c580310034600360149054906101000a900461ffff16600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516020016132a89190615c98565b60405160208183030381529060405289896040516020016132ca929190615cb3565b604051602081830303815290604052336000886040518863ffffffff1660e01b81526004016132fe96959493929190615cfc565b6000604051808303818588803b15801561331757600080fd5b505af115801561332b573d6000803e3d6000fd5b50505050505050505050565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805461340d90614085565b90600052602060002090601f01602090048101928261342f5760008555613476565b82601f1061344857803560ff1916838001178555613476565b82800160010185558215613476579182015b8281111561347557823582559160200191906001019061345a565b5b509050613483919061350d565b5090565b82805461349390614085565b90600052602060002090601f0160209004810192826134b557600085556134fc565b82601f106134ce57803560ff19168380011785556134fc565b828001600101855582156134fc579182015b828111156134fb5782358255916020019190600101906134e0565b5b509050613509919061350d565b5090565b5b8082111561352657600081600090555060010161350e565b5090565b6000604051905090565b600080fd5b600080fd5b600061ffff82169050919050565b6135558161353e565b811461356057600080fd5b50565b6000813590506135728161354c565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135cb82613582565b810181811067ffffffffffffffff821117156135ea576135e9613593565b5b80604052505050565b60006135fd61352a565b905061360982826135c2565b919050565b600067ffffffffffffffff82111561362957613628613593565b5b61363282613582565b9050602081019050919050565b82818337600083830152505050565b600061366161365c8461360e565b6135f3565b90508281526020810184848401111561367d5761367c61357d565b5b61368884828561363f565b509392505050565b600082601f8301126136a5576136a4613578565b5b81356136b584826020860161364e565b91505092915050565b600067ffffffffffffffff82169050919050565b6136db816136be565b81146136e657600080fd5b50565b6000813590506136f8816136d2565b92915050565b6000806000806080858703121561371857613717613534565b5b600061372687828801613563565b945050602085013567ffffffffffffffff81111561374757613746613539565b5b61375387828801613690565b9350506040613764878288016136e9565b925050606085013567ffffffffffffffff81111561378557613784613539565b5b61379187828801613690565b91505092959194509250565b6137a68161353e565b82525050565b60006020820190506137c1600083018461379d565b92915050565b6000602082840312156137dd576137dc613534565b5b60006137eb84828501613563565b91505092915050565b6000819050919050565b613807816137f4565b811461381257600080fd5b50565b600081359050613824816137fe565b92915050565b6000602082840312156138405761383f613534565b5b600061384e84828501613815565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613891578082015181840152602081019050613876565b838111156138a0576000848401525b50505050565b60006138b182613857565b6138bb8185613862565b93506138cb818560208601613873565b6138d481613582565b840191505092915050565b600060c08201905081810360008301526138f981896138a6565b9050818103602083015261390d81886138a6565b9050818103604083015261392181876138a6565b9050818103606083015261393581866138a6565b9050818103608083015261394981856138a6565b905081810360a083015261395d81846138a6565b9050979650505050505050565b6000602082019050818103600083015261398481846138a6565b905092915050565b600067ffffffffffffffff8211156139a7576139a6613593565b5b6139b082613582565b9050602081019050919050565b60006139d06139cb8461398c565b6135f3565b9050828152602081018484840111156139ec576139eb61357d565b5b6139f784828561363f565b509392505050565b600082601f830112613a1457613a13613578565b5b8135613a248482602086016139bd565b91505092915050565b600060208284031215613a4357613a42613534565b5b600082013567ffffffffffffffff811115613a6157613a60613539565b5b613a6d848285016139ff565b91505092915050565b600080fd5b600080fd5b60008083601f840112613a9657613a95613578565b5b8235905067ffffffffffffffff811115613ab357613ab2613a76565b5b602083019150836001820283011115613acf57613ace613a7b565b5b9250929050565b600080600060408486031215613aef57613aee613534565b5b6000613afd86828701613563565b935050602084013567ffffffffffffffff811115613b1e57613b1d613539565b5b613b2a86828701613a80565b92509250509250925092565b60008115159050919050565b613b4b81613b36565b82525050565b6000602082019050613b666000830184613b42565b92915050565b600080600060608486031215613b8557613b84613534565b5b6000613b9386828701613563565b935050602084013567ffffffffffffffff811115613bb457613bb3613539565b5b613bc086828701613690565b9250506040613bd1868287016136e9565b9150509250925092565b6000819050919050565b613bee81613bdb565b82525050565b6000602082019050613c096000830184613be5565b92915050565b600081905082602060030282011115613c2b57613c2a613a7b565b5b92915050565b600081905082602060020282011115613c4d57613c4c613a7b565b5b92915050565b600080600060808486031215613c6c57613c6b613534565b5b6000613c7a86828701613815565b935050602084013567ffffffffffffffff811115613c9b57613c9a613539565b5b613ca786828701613c0f565b9250506040613cb886828701613c31565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613ced82613cc2565b9050919050565b613cfd81613ce2565b82525050565b613d0c816137f4565b82525050565b6000604082019050613d276000830185613cf4565b613d346020830184613d03565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000613d6282613d3b565b613d6c8185613d46565b9350613d7c818560208601613873565b613d8581613582565b840191505092915050565b60006020820190508181036000830152613daa8184613d57565b905092915050565b6000602082019050613dc76000830184613d03565b92915050565b6000602082019050613de26000830184613cf4565b92915050565b6000819050919050565b6000613e0d613e08613e0384613cc2565b613de8565b613cc2565b9050919050565b6000613e1f82613df2565b9050919050565b6000613e3182613e14565b9050919050565b613e4181613e26565b82525050565b6000602082019050613e5c6000830184613e38565b92915050565b60008060408385031215613e7957613e78613534565b5b6000613e8785828601613815565b9250506020613e9885828601613815565b9150509250929050565b600080600080600060808688031215613ebe57613ebd613534565b5b6000613ecc88828901613563565b9550506020613edd88828901613563565b9450506040613eee88828901613815565b935050606086013567ffffffffffffffff811115613f0f57613f0e613539565b5b613f1b88828901613a80565b92509250509295509295909350565b613f3381613ce2565b8114613f3e57600080fd5b50565b600081359050613f5081613f2a565b92915050565b600060208284031215613f6c57613f6b613534565b5b6000613f7a84828501613f41565b91505092915050565b60008060008060808587031215613f9d57613f9c613534565b5b6000613fab87828801613563565b9450506020613fbc87828801613563565b9350506040613fcd87828801613f41565b9250506060613fde87828801613815565b91505092959194509250565b7f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c65720000600082015250565b6000614020601e83613862565b915061402b82613fea565b602082019050919050565b6000602082019050818103600083015261404f81614013565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061409d57607f821691505b602082108114156140b1576140b0614056565b5b50919050565b7f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000614113602683613862565b915061411e826140b7565b604082019050919050565b6000602082019050818103600083015261414281614106565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061417f602083613862565b915061418a82614149565b602082019050919050565b600060208201905081810360008301526141ae81614172565b9050919050565b600081905092915050565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b60006141f66001836141b5565b9150614201826141c0565b600182019050919050565b7f226e616d65223a22436861696e446f75626c6520000000000000000000000000600082015250565b60006142426014836141b5565b915061424d8261420c565b601482019050919050565b600061426382613857565b61426d81856141b5565b935061427d818560208601613873565b80840191505092915050565b7f222c000000000000000000000000000000000000000000000000000000000000600082015250565b60006142bf6002836141b5565b91506142ca82614289565b600282019050919050565b7f226465736372697074696f6e223a224e4f4e414d453a2054686973206973207460008201527f6865206465736372697074696f6e222c00000000000000000000000000000000602082015250565b60006143316030836141b5565b915061433c826142d5565b603082019050919050565b7f22616e696d6174696f6e5f75726c223a2022646174613a696d6167652f73766760008201527f2b786d6c3b6261736536342c0000000000000000000000000000000000000000602082015250565b60006143a3602c836141b5565b91506143ae82614347565b602c82019050919050565b7f2261747472696275746573223a20000000000000000000000000000000000000600082015250565b60006143ef600e836141b5565b91506143fa826143b9565b600e82019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b600061443b6001836141b5565b915061444682614405565b600182019050919050565b600061445c826141e9565b915061446782614235565b91506144738286614258565b915061447e826142b2565b915061448982614324565b915061449482614396565b91506144a08285614258565b91506144ab826142b2565b91506144b6826143e2565b91506144c28284614258565b91506144cd8261442e565b9150819050949350505050565b600081905092915050565b60006144f082613d3b565b6144fa81856144da565b935061450a818560208601613873565b80840191505092915050565b600061452282846144e5565b915081905092915050565b7f68747470733a2f2f697066732e696f2f697066732f0000000000000000000000600082015250565b60006145636015836141b5565b915061456e8261452d565b601582019050919050565b600061458482614556565b91506145908284614258565b915081905092915050565b60006145a783856144da565b93506145b483858461363f565b82840190509392505050565b60006145cd82848661459b565b91508190509392505050565b60006145e58385613d46565b93506145f283858461363f565b6145fb83613582565b840190509392505050565b600060408201905061461b600083018661379d565b818103602083015261462e8184866145d9565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261469357614692614667565b5b80840192508235915067ffffffffffffffff8211156146b5576146b461466c565b5b6020830192506001820236038313156146d1576146d0614671565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614713826137f4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614746576147456146d9565b5b600182019050919050565b7f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560008201527f204c7a4170700000000000000000000000000000000000000000000000000000602082015250565b60006147ad602683613862565b91506147b882614751565b604082019050919050565b600060208201905081810360008301526147dc816147a0565b9050919050565b7f3c696d6167652020783d22000000000000000000000000000000000000000000600082015250565b6000614819600b836141b5565b9150614824826147e3565b600b82019050919050565b7f2220793d22000000000000000000000000000000000000000000000000000000600082015250565b60006148656005836141b5565b91506148708261482f565b600582019050919050565b7f222077696474683d220000000000000000000000000000000000000000000000600082015250565b60006148b16009836141b5565b91506148bc8261487b565b600982019050919050565b7f22206865696768743d2200000000000000000000000000000000000000000000600082015250565b60006148fd600a836141b5565b9150614908826148c7565b600a82019050919050565b7f2220687265663d22000000000000000000000000000000000000000000000000600082015250565b60006149496008836141b5565b915061495482614913565b600882019050919050565b7f222f3e0000000000000000000000000000000000000000000000000000000000600082015250565b60006149956003836141b5565b91506149a08261495f565b600382019050919050565b60006149b68261480c565b91506149c2828d614258565b91506149cd82614858565b91506149d9828c614258565b91506149e4826148a4565b91506149f0828b614258565b91506149fb826148f0565b9150614a07828a614258565b9150614a128261493c565b9150614a1e8289614258565b9150614a2982614988565b9150614a348261480c565b9150614a408288614258565b9150614a4b82614858565b9150614a578287614258565b9150614a62826148a4565b9150614a6e8286614258565b9150614a79826148f0565b9150614a858285614258565b9150614a908261493c565b9150614a9c8284614258565b9150614aa782614988565b91508190509b9a5050505050505050505050565b60008160f01b9050919050565b6000614ad382614abb565b9050919050565b614aeb614ae68261353e565b614ac8565b82525050565b6000819050919050565b614b0c614b07826137f4565b614af1565b82525050565b6000614b1e8285614ada565b600282019150614b2e8284614afb565b6020820191508190509392505050565b600060a082019050614b53600083018861379d565b614b606020830187613cf4565b8181036040830152614b728186613d57565b9050614b816060830185613b42565b8181036080830152614b938184613d57565b90509695505050505050565b600081519050614bae816137fe565b92915050565b60008060408385031215614bcb57614bca613534565b5b6000614bd985828601614b9f565b9250506020614bea85828601614b9f565b9150509250929050565b7f3c7376672077696474683d223139393022206865696768743d2231393930222060008201527f76696577426f783d2230203020313939302031393930222066696c6c3d226e6f60208201527f6e652220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f32303060408201527f302f737667223e3c673e3c726563742077696474683d2231393930222068656960608201527f6768743d2231393930222066696c6c3d226761696e73626f726f222f3e3c746560808201527f78742066696c6c3d226f72616e67652220786d6c2d73706163653d227072657360a08201527f6572766522207374796c653d2277686974652d73706163653a2070726522206660c08201527f6f6e742d66616d696c793d224675747572612220666f6e742d73697a653d223260e08201527f343222206c65747465722d73706163696e673d222d302e3038656d223e3c74736101008201527f70616e20783d2236372220793d22333330223e436861696e446f75626c653c2f6101208201527f747370616e3e3c2f746578743e3c746578742066696c6c3d22626c61636b22206101408201527f786d6c2d73706163653d22707265736572766522207374796c653d22776869746101608201527f652d73706163653a207072652220666f6e742d66616d696c793d2246757475726101808201527f612220666f6e742d73697a653d2231303722206c65747465722d73706163696e6101a08201527f673d222d302e3031656d223e3c747370616e20783d2236372220793d223630306101c08201527f223e437573746f6d697365206f6e203c2f747370616e3e3c2f746578743e3c746101e08201527f6578742066696c6c3d22626c61636b2220786d6c2d73706163653d22707265736102008201527f6572766522207374796c653d2277686974652d73706163653a207072652220666102208201527f6f6e742d66616d696c793d224675747572612220666f6e742d73697a653d22316102408201527f303722206c65747465722d73706163696e673d222d302e3031656d22207465786102608201527f742d6465636f726174696f6e3d22756e6465726c696e65223e3c747370616e206102808201527f783d223732302220793d22363030223e636861696e646f75626c652e78797a3c6102a08201527f2f747370616e3e3c2f746578743e3c726563742072783d2200000000000000006102c082015250565b6000614f7e6102d8836141b5565b9150614f8982614bf4565b6102d882019050919050565b7f222072793d220000000000000000000000000000000000000000000000000000600082015250565b6000614fcb6006836141b5565b9150614fd682614f95565b600682019050919050565b7f2220783d223436372220793d22373932222077696474683d223130353522206860008201527f65696768743d223130353522207374796c653d2266696c6c3a72676228000000602082015250565b600061503d603d836141b5565b915061504882614fe1565b603d82019050919050565b7f293b7374726f6b652d77696474683a333b7374726f6b653a72676228302c302c60008201527f3029222f3e3c666f726569676e4f626a65637420783d223531332220793d223760208201527f31352e3235222077696474683d2239303022206865696768743d22383530222060408201527f666f6e742d73697a653d22313037223e3c7020786d6c6e733d22687474703a2f60608201527f2f7777772e77332e6f72672f313939392f7868746d6c22207374796c653d226660808201527f6f6e742d66616d696c793a20467574757261223e00000000000000000000000060a082015250565b600061514760b4836141b5565b915061515282615053565b60b482019050919050565b7f3c2f703e3c2f666f726569676e4f626a6563743e3c696d6167652020783d223760008201527f30362220793d22383036222077696474683d2235393022206865696768743d2260208201527f313136392220687265663d2268747470733a2f2f697066732e696f2f6970667360408201527f2f62616679626569646b787072686b73756679353361796e6e327934646e706d60608201527f667376347134676e637a346872346b3636766c65666c736d6574646d222f3e00608082015250565b600061522b609f836141b5565b91506152368261515d565b609f82019050919050565b7f3c2f673e3c2f7376673e00000000000000000000000000000000000000000000600082015250565b6000615277600a836141b5565b915061528282615241565b600a82019050919050565b600061529882614f70565b91506152a48288614258565b91506152af82614fbe565b91506152bb8287614258565b91506152c682615030565b91506152d28286614258565b91506152dd8261513a565b91506152e98285614258565b91506152f48261521e565b91506153008284614258565b915061530b8261526a565b91508190509695505050505050565b600060808201905061532f600083018861379d565b61533c602083018761379d565b6153496040830186613d03565b818103606083015261535c8184866145d9565b90509695505050505050565b7f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360008201527f6167650000000000000000000000000000000000000000000000000000000000602082015250565b60006153c4602383613862565b91506153cf82615368565b604082019050919050565b600060208201905081810360008301526153f3816153b7565b9050919050565b7f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6160008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000615456602183613862565b9150615461826153fa565b604082019050919050565b6000602082019050818103600083015261548581615449565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006154e8602683613862565b91506154f38261548c565b604082019050919050565b60006020820190508181036000830152615517816154db565b9050919050565b6000608082019050615533600083018761379d565b615540602083018661379d565b61554d6040830185613cf4565b61555a6060830184613d03565b95945050505050565b60006155766155718461360e565b6135f3565b9050828152602081018484840111156155925761559161357d565b5b61559d848285613873565b509392505050565b600082601f8301126155ba576155b9613578565b5b81516155ca848260208601615563565b91505092915050565b6000602082840312156155e9576155e8613534565b5b600082015167ffffffffffffffff81111561560757615606613539565b5b615613848285016155a5565b91505092915050565b600082825260208201905092915050565b600061563882613857565b615642818561561c565b9350615652818560208601613873565b61565b81613582565b840191505092915050565b60006020820190508181036000830152615680818461562d565b905092915050565b615691816136be565b82525050565b60006080820190506156ac600083018761379d565b81810360208301526156be8186613d57565b90506156cd6040830185615688565b81810360608301526156df8184613d57565b905095945050505050565b60006156f5826137f4565b9150615700836137f4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615735576157346146d9565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061577a826137f4565b9150615785836137f4565b92508261579557615794615740565b5b828204905092915050565b60006157ab826137f4565b91506157b6836137f4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156157ef576157ee6146d9565b5b828202905092915050565b7f5b00000000000000000000000000000000000000000000000000000000000000600082015250565b60006158306001836141b5565b915061583b826157fa565b600182019050919050565b600061585182615823565b9150819050919050565b7f7b2274726169745f74797065223a220000000000000000000000000000000000600082015250565b6000615891600f836141b5565b915061589c8261585b565b600f82019050919050565b7f222c2276616c7565223a22000000000000000000000000000000000000000000600082015250565b60006158dd600b836141b5565b91506158e8826158a7565b600b82019050919050565b7f227d2c0000000000000000000000000000000000000000000000000000000000600082015250565b60006159296003836141b5565b9150615934826158f3565b600382019050919050565b600061594b82866144e5565b915061595682615884565b91506159628285614258565b915061596d826158d0565b91506159798284614258565b91506159848261591c565b9150819050949350505050565b7f7b2274726169745f74797065223a2268656164222c2276616c7565223a220000600082015250565b60006159c7601e836141b5565b91506159d282615991565b601e82019050919050565b60008190508160005260206000209050919050565b600081546159ff81614085565b615a0981866141b5565b94506001821660008114615a245760018114615a3557615a68565b60ff19831686528186019350615a68565b615a3e856159dd565b60005b83811015615a6057815481890152600182019150602081019050615a41565b838801955050505b50505092915050565b6000615a7d82856144e5565b9150615a88826159ba565b9150615a9482846159f2565b9150615a9f8261591c565b91508190509392505050565b7f7b2274726169745f74797065223a2265796573222c2276616c7565223a220000600082015250565b6000615ae1601e836141b5565b9150615aec82615aab565b601e82019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b6000615b2d6002836141b5565b9150615b3882615af7565b600282019050919050565b6000615b4f82856144e5565b9150615b5a82615ad4565b9150615b6682846159f2565b9150615b7182615b20565b91508190509392505050565b7f5d00000000000000000000000000000000000000000000000000000000000000600082015250565b6000615bb36001836141b5565b9150615bbe82615b7d565b600182019050919050565b6000615bd582846144e5565b9150615be082615ba6565b915081905092915050565b6000615bf6826137f4565b9150615c01836137f4565b925082821015615c1457615c136146d9565b5b828203905092915050565b6000615c2a826137f4565b9150615c35836137f4565b925082615c4557615c44615740565b5b828206905092915050565b60008160601b9050919050565b6000615c6882615c50565b9050919050565b6000615c7a82615c5d565b9050919050565b615c92615c8d82613ce2565b615c6f565b82525050565b6000615ca48284615c81565b60148201915081905092915050565b6000615cbf8285614afb565b602082019150615ccf82846144e5565b91508190509392505050565b6000615ce682613cc2565b9050919050565b615cf681615cdb565b82525050565b600060c082019050615d11600083018961379d565b8181036020830152615d238188613d57565b90508181036040830152615d378187613d57565b9050615d466060830186615ced565b615d536080830185613cf4565b81810360a0830152615d658184613d57565b905097965050505050505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f516d50674e6f54734c38447648376643324b5368663348733677627a5967685a3233584c475462766366706d6943a2646970667358221220b0224f5f8dbde5a76a7517c0214448f37877f3e4fd6dbc36ee1a954e968d6b0264736f6c634300080a0033",
  "libraries": {
    "IPFS": "0xFD4c8B168A6AA0f5926ED6125bDB8cC1715D311a",
    "DateLibrary": "0x8440fB60ee57eBfcEdf8AB6Beb08a5562617a01A"
  },
  "devdoc": {
    "author": "Valerio Leo @valerioHQ",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A backend for a ChainDouble NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/TokenController.sol:TokenController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3671,
        "contract": "contracts/TokenController.sol:TokenController",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 3961,
        "contract": "contracts/TokenController.sol:TokenController",
        "label": "failedMessages",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 2756,
        "contract": "contracts/TokenController.sol:TokenController",
        "label": "baseToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2758,
        "contract": "contracts/TokenController.sol:TokenController",
        "label": "baseChain",
        "offset": 20,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 2764,
        "contract": "contracts/TokenController.sol:TokenController",
        "label": "tokenConfigs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_string_storage)3_storage)"
      },
      {
        "astId": 2770,
        "contract": "contracts/TokenController.sol:TokenController",
        "label": "tokenConfigsSvg",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      },
      {
        "astId": 2792,
        "contract": "contracts/TokenController.sol:TokenController",
        "label": "eyes",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_struct(SvgTrait)2788_storage)dyn_storage"
      },
      {
        "astId": 2796,
        "contract": "contracts/TokenController.sol:TokenController",
        "label": "head",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(SvgTrait)2788_storage)dyn_storage"
      },
      {
        "astId": 2801,
        "contract": "contracts/TokenController.sol:TokenController",
        "label": "tokenUpdateRecords",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(UpdateRecord)2775_storage)"
      },
      {
        "astId": 2804,
        "contract": "contracts/TokenController.sol:TokenController",
        "label": "traitsTypes",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)3_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(SvgTrait)2788_storage)dyn_storage": {
        "base": "t_struct(SvgTrait)2788_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenController.SvgTrait[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint256,t_array(t_string_storage)3_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)3_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_struct(UpdateRecord)2775_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TokenController.UpdateRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(UpdateRecord)2775_storage"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SvgTrait)2788_storage": {
        "encoding": "inplace",
        "label": "struct TokenController.SvgTrait",
        "members": [
          {
            "astId": 2777,
            "contract": "contracts/TokenController.sol:TokenController",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2779,
            "contract": "contracts/TokenController.sol:TokenController",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2781,
            "contract": "contracts/TokenController.sol:TokenController",
            "label": "width",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 2783,
            "contract": "contracts/TokenController.sol:TokenController",
            "label": "height",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 2785,
            "contract": "contracts/TokenController.sol:TokenController",
            "label": "ipfs",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2787,
            "contract": "contracts/TokenController.sol:TokenController",
            "label": "name",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(UpdateRecord)2775_storage": {
        "encoding": "inplace",
        "label": "struct TokenController.UpdateRecord",
        "members": [
          {
            "astId": 2772,
            "contract": "contracts/TokenController.sol:TokenController",
            "label": "updater",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2774,
            "contract": "contracts/TokenController.sol:TokenController",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}