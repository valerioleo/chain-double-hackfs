{
  "address": "0xFD4c8B168A6AA0f5926ED6125bDB8cC1715D311a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contentString",
          "type": "string"
        }
      ],
      "name": "generateHash",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x6cfaa61bf37f25c4f898097d06f9ba57ddbbd74311795c127ae7c870d6a58ef9",
  "receipt": {
    "to": null,
    "from": "0x7447b4aD5b6083EC99998D4001A0E54aA0D34d42",
    "contractAddress": "0xFD4c8B168A6AA0f5926ED6125bDB8cC1715D311a",
    "transactionIndex": 3,
    "gasUsed": "1002540",
    "logsBloom": "0x
    "blockHash": "0xd65c9c8b49e76276c5d8cdb4a6ae1e61847591cfb026820441dac5ac730e317a",
    "transactionHash": "0x6cfaa61bf37f25c4f898097d06f9ba57ddbbd74311795c127ae7c870d6a58ef9",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 27301258,
        "transactionHash": "0x6cfaa61bf37f25c4f898097d06f9ba57ddbbd74311795c127ae7c870d6a58ef9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007447b4ad5b6083ec99998d4001a0e54aa0d34d42",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000009597cd6797cea00000000000000000000000000000000000000000000000000a1075fff44291b900000000000000000000000000000000000000000000201d60c6417c0ee4f4bc000000000000000000000000000000000000000000000000097ade328caac31900000000000000000000000000000000000000000000201d615bd949767cc35c",
        "logIndex": 5,
        "blockHash": "0xd65c9c8b49e76276c5d8cdb4a6ae1e61847591cfb026820441dac5ac730e317a"
      }
    ],
    "blockNumber": 27301258,
    "cumulativeGasUsed": "2188597",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3c08ad393b147548ec634df5be667a65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contentString\",\"type\":\"string\"}],\"name\":\"generateHash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Martin Lundfall (martin.lundfall@gmail.com)\",\"kind\":\"dev\",\"methods\":{\"generateHash(string)\":{\"details\":\"generates the corresponding IPFS hash (in base 58) to the given string\",\"params\":{\"contentString\":\"The content of the IPFS object\"},\"returns\":{\"_0\":\"The IPFS hash in base 58\"}}},\"title\":\"verifyIPFS\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IPFS.sol\":\"IPFS\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IPFS.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/// @title verifyIPFS\\n/// @author Martin Lundfall (martin.lundfall@gmail.com)\\nlibrary IPFS {\\n  bytes constant prefix1 = hex\\\"0a\\\";\\n  bytes constant prefix2 = hex\\\"080212\\\";\\n  bytes constant postfix = hex\\\"18\\\";\\n  bytes constant sha256MultiHash = hex\\\"1220\\\";\\n  bytes constant ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\\n\\n  /// @dev generates the corresponding IPFS hash (in base 58) to the given string\\n  /// @param contentString The content of the IPFS object\\n  /// @return The IPFS hash in base 58\\n  function generateHash(string memory contentString) public pure returns (bytes memory) {\\n    bytes memory content = bytes(contentString);\\n    bytes memory len = lengthEncode(content.length);\\n    bytes memory len2 = lengthEncode(content.length + 4 + 2*len.length);\\n    return toBase58(concat(sha256MultiHash, toBytes(sha256(abi.encodePacked(prefix1, len2, prefix2, len, content, postfix, len)))));\\n  }\\n\\n  /// @dev Compares an IPFS hash with content\\n  function verifyHash(string memory contentString, string memory hash) internal pure returns (bool) {\\n    return equal(generateHash(contentString), bytes(hash));\\n  }\\n  \\n  /// @dev Converts hex string to base 58\\n  function toBase58(bytes memory source) internal pure returns (bytes memory) {\\n    if (source.length == 0) return new bytes(0);\\n    uint8[] memory digits = new uint8[](64); //TODO: figure out exactly how much is needed\\n    digits[0] = 0;\\n    uint8 digitlength = 1;\\n    for (uint256 i = 0; i<source.length; ++i) {\\n      uint carry = uint8(source[i]);\\n      for (uint256 j = 0; j<digitlength; ++j) {\\n        carry += uint(digits[j]) * 256;\\n        digits[j] = uint8(carry % 58);\\n        carry = carry / 58;\\n      }\\n      \\n      while (carry > 0) {\\n        digits[digitlength] = uint8(carry % 58);\\n        digitlength++;\\n        carry = carry / 58;\\n      }\\n    }\\n    //return digits;\\n    return toAlphabet(reverse(truncate(digits, digitlength)));\\n  }\\n\\n  function lengthEncode(uint256 length) internal pure returns (bytes memory) {\\n    if (length < 128) {\\n      return to_binary(length);\\n    }\\n    else {\\n      return concat(to_binary(length % 128 + 128), to_binary(length / 128));\\n    }\\n  }\\n\\n  function toBytes(bytes32 input) internal pure returns (bytes memory) {\\n    bytes memory output = new bytes(32);\\n    for (uint8 i = 0; i<32; i++) {\\n      output[i] = input[i];\\n    }\\n    return output;\\n  }\\n    \\n  function equal(bytes memory one, bytes memory two) internal pure returns (bool) {\\n    if (!(one.length == two.length)) {\\n      return false;\\n    }\\n    for (uint256 i = 0; i<one.length; i++) {\\n      if (!(one[i] == two[i])) {\\n\\treturn false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  function truncate(uint8[] memory array, uint8 length) internal pure returns (uint8[] memory) {\\n    uint8[] memory output = new uint8[](length);\\n    for (uint256 i = 0; i<length; i++) {\\n        output[i] = array[i];\\n    }\\n    return output;\\n  }\\n  \\n  function reverse(uint8[] memory input) internal pure returns (uint8[] memory) {\\n    uint8[] memory output = new uint8[](input.length);\\n    for (uint256 i = 0; i<input.length; i++) {\\n        output[i] = input[input.length-1-i];\\n    }\\n    return output;\\n  }\\n  \\n  function toAlphabet(uint8[] memory indices) internal pure returns (bytes memory) {\\n    bytes memory output = new bytes(indices.length);\\n    for (uint256 i = 0; i<indices.length; i++) {\\n        output[i] = ALPHABET[indices[i]];\\n    }\\n    return output;\\n  }\\n\\n  function concat(bytes memory byteArray, bytes memory byteArray2) internal pure returns (bytes memory) {\\n    bytes memory returnArray = new bytes(byteArray.length + byteArray2.length);\\n    uint i = 0;\\n    for (i; i < byteArray.length; i++) {\\n      returnArray[i] = byteArray[i];\\n    }\\n    for (i; i < (byteArray.length + byteArray2.length); i++) {\\n      returnArray[i] = byteArray2[i - byteArray.length];\\n    }\\n    return returnArray;\\n  }\\n    \\n  function to_binary(uint256 x) internal pure returns (bytes memory) {\\n    if (x == 0) {\\n      return new bytes(0);\\n    }\\n    else {\\n      bytes1 s = bytes1(uint8(x % 256));\\n      bytes memory r = new bytes(1);\\n      r[0] = s;\\n      return concat(to_binary(x / 256), r);\\n    }\\n  }\\n}\",\"keccak256\":\"0xf02136ea5bbc2ee194a091bbe24ae515618e032647e25a6dbdd4db97f9820592\"}},\"version\":1}",
  "bytecode": "0x611137610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063b063152a1461003a575b600080fd5b610054600480360381019061004f9190610c5c565b61006a565b6040516100619190610d2d565b60405180910390f35b60606000829050600061007d8251610223565b905060006100af825160026100929190610d88565b600485516100a09190610de2565b6100aa9190610de2565b610223565b90506102196102146040518060400160405280600281526020017f122000000000000000000000000000000000000000000000000000000000000081525061020f60026040518060400160405280600181526020017f0a00000000000000000000000000000000000000000000000000000000000000815250866040518060400160405280600381526020017f0802120000000000000000000000000000000000000000000000000000000000815250898b6040518060400160405280600181526020017f18000000000000000000000000000000000000000000000000000000000000008152508c6040516020016101ae9796959493929190610e74565b6040516020818303038152906040526040516101ca9190610ed9565b602060405180830381855afa1580156101e7573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061020a9190610f26565b610283565b610362565b6104e1565b9350505050919050565b6060608082101561023e5761023782610729565b905061027e565b61027b610261608080856102529190610f82565b61025c9190610de2565b610729565b6102766080856102719190610fb3565b610729565b610362565b90505b919050565b60606000602067ffffffffffffffff8111156102a2576102a1610b31565b5b6040519080825280601f01601f1916602001820160405280156102d45781602001600182028036833780820191505090505b50905060005b60208160ff16101561035857838160ff16602081106102fc576102fb610fe4565b5b1a60f81b828260ff168151811061031657610315610fe4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061035090611020565b9150506102da565b5080915050919050565b60606000825184516103749190610de2565b67ffffffffffffffff81111561038d5761038c610b31565b5b6040519080825280601f01601f1916602001820160405280156103bf5781602001600182028036833780820191505090505b50905060005b8451811015610441578481815181106103e1576103e0610fe4565b5b602001015160f81c60f81b8282815181106103ff576103fe610fe4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806104399061104a565b9150506103c5565b5b835185516104509190610de2565b8110156104d657838551826104659190611093565b8151811061047657610475610fe4565b5b602001015160f81c60f81b82828151811061049457610493610fe4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806104ce9061104a565b915050610442565b819250505092915050565b606060008251141561054257600067ffffffffffffffff81111561050857610507610b31565b5b6040519080825280601f01601f19166020018201604052801561053a5781602001600182028036833780820191505090505b509050610724565b6000604067ffffffffffffffff81111561055f5761055e610b31565b5b60405190808252806020026020018201604052801561058d5781602001602082028036833780820191505090505b5090506000816000815181106105a6576105a5610fe4565b5b602002602001019060ff16908160ff168152505060006001905060005b84518110156107045760008582815181106105e1576105e0610fe4565b5b602001015160f81c60f81b60f81c60ff16905060005b8360ff1681101561068e5761010085828151811061061857610617610fe4565b5b602002602001015160ff1661062d9190610d88565b826106389190610de2565b9150603a826106479190610f82565b85828151811061065a57610659610fe4565b5b602002602001019060ff16908160ff1681525050603a8261067b9190610fb3565b9150806106879061104a565b90506105f7565b505b60008111156106f257603a816106a69190610f82565b848460ff16815181106106bc576106bb610fe4565b5b602002602001019060ff16908160ff168152505082806106db90611020565b935050603a816106eb9190610fb3565b9050610690565b50806106fd9061104a565b90506105c3565b5061071f61071a610715848461085d565b61091d565b6109f0565b925050505b919050565b6060600082141561078957600067ffffffffffffffff81111561074f5761074e610b31565b5b6040519080825280601f01601f1916602001820160405280156107815781602001600182028036833780820191505090505b509050610858565b6000610100836107999190610f82565b60f81b90506000600167ffffffffffffffff8111156107bb576107ba610b31565b5b6040519080825280601f01601f1916602001820160405280156107ed5781602001600182028036833780820191505090505b509050818160008151811061080557610804610fe4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061085361084d610100866108489190610fb3565b610729565b82610362565b925050505b919050565b606060008260ff1667ffffffffffffffff81111561087e5761087d610b31565b5b6040519080825280602002602001820160405280156108ac5781602001602082028036833780820191505090505b50905060005b8360ff16811015610912578481815181106108d0576108cf610fe4565b5b60200260200101518282815181106108eb576108ea610fe4565b5b602002602001019060ff16908160ff1681525050808061090a9061104a565b9150506108b2565b508091505092915050565b60606000825167ffffffffffffffff81111561093c5761093b610b31565b5b60405190808252806020026020018201604052801561096a5781602001602082028036833780820191505090505b50905060005b83518110156109e6578381600186516109899190611093565b6109939190611093565b815181106109a4576109a3610fe4565b5b60200260200101518282815181106109bf576109be610fe4565b5b602002602001019060ff16908160ff168152505080806109de9061104a565b915050610970565b5080915050919050565b60606000825167ffffffffffffffff811115610a0f57610a0e610b31565b5b6040519080825280601f01601f191660200182016040528015610a415781602001600182028036833780820191505090505b50905060005b8351811015610af8576040518060600160405280603a81526020016110c8603a9139848281518110610a7c57610a7b610fe4565b5b602002602001015160ff1681518110610a9857610a97610fe4565b5b602001015160f81c60f81b828281518110610ab657610ab5610fe4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610af09061104a565b915050610a47565b5080915050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b6982610b20565b810181811067ffffffffffffffff82111715610b8857610b87610b31565b5b80604052505050565b6000610b9b610b02565b9050610ba78282610b60565b919050565b600067ffffffffffffffff821115610bc757610bc6610b31565b5b610bd082610b20565b9050602081019050919050565b82818337600083830152505050565b6000610bff610bfa84610bac565b610b91565b905082815260208101848484011115610c1b57610c1a610b1b565b5b610c26848285610bdd565b509392505050565b600082601f830112610c4357610c42610b16565b5b8135610c53848260208601610bec565b91505092915050565b600060208284031215610c7257610c71610b0c565b5b600082013567ffffffffffffffff811115610c9057610c8f610b11565b5b610c9c84828501610c2e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610cdf578082015181840152602081019050610cc4565b83811115610cee576000848401525b50505050565b6000610cff82610ca5565b610d098185610cb0565b9350610d19818560208601610cc1565b610d2281610b20565b840191505092915050565b60006020820190508181036000830152610d478184610cf4565b905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d9382610d4f565b9150610d9e83610d4f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dd757610dd6610d59565b5b828202905092915050565b6000610ded82610d4f565b9150610df883610d4f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e2d57610e2c610d59565b5b828201905092915050565b600081905092915050565b6000610e4e82610ca5565b610e588185610e38565b9350610e68818560208601610cc1565b80840191505092915050565b6000610e80828a610e43565b9150610e8c8289610e43565b9150610e988288610e43565b9150610ea48287610e43565b9150610eb08286610e43565b9150610ebc8285610e43565b9150610ec88284610e43565b915081905098975050505050505050565b6000610ee58284610e43565b915081905092915050565b6000819050919050565b610f0381610ef0565b8114610f0e57600080fd5b50565b600081519050610f2081610efa565b92915050565b600060208284031215610f3c57610f3b610b0c565b5b6000610f4a84828501610f11565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f8d82610d4f565b9150610f9883610d4f565b925082610fa857610fa7610f53565b5b828206905092915050565b6000610fbe82610d4f565b9150610fc983610d4f565b925082610fd957610fd8610f53565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff82169050919050565b600061102b82611013565b915060ff82141561103f5761103e610d59565b5b600182019050919050565b600061105582610d4f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561108857611087610d59565b5b600182019050919050565b600061109e82610d4f565b91506110a983610d4f565b9250828210156110bc576110bb610d59565b5b82820390509291505056fe31323334353637383941424344454647484a4b4c4d4e505152535455565758595a6162636465666768696a6b6d6e6f707172737475767778797aa26469706673582212206a6c18b07569d512c0e8a57f7a3e0e184ccc6f33c28c075a0e4b1a82b1ee36bf64736f6c634300080a0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063b063152a1461003a575b600080fd5b610054600480360381019061004f9190610c5c565b61006a565b6040516100619190610d2d565b60405180910390f35b60606000829050600061007d8251610223565b905060006100af825160026100929190610d88565b600485516100a09190610de2565b6100aa9190610de2565b610223565b90506102196102146040518060400160405280600281526020017f122000000000000000000000000000000000000000000000000000000000000081525061020f60026040518060400160405280600181526020017f0a00000000000000000000000000000000000000000000000000000000000000815250866040518060400160405280600381526020017f0802120000000000000000000000000000000000000000000000000000000000815250898b6040518060400160405280600181526020017f18000000000000000000000000000000000000000000000000000000000000008152508c6040516020016101ae9796959493929190610e74565b6040516020818303038152906040526040516101ca9190610ed9565b602060405180830381855afa1580156101e7573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061020a9190610f26565b610283565b610362565b6104e1565b9350505050919050565b6060608082101561023e5761023782610729565b905061027e565b61027b610261608080856102529190610f82565b61025c9190610de2565b610729565b6102766080856102719190610fb3565b610729565b610362565b90505b919050565b60606000602067ffffffffffffffff8111156102a2576102a1610b31565b5b6040519080825280601f01601f1916602001820160405280156102d45781602001600182028036833780820191505090505b50905060005b60208160ff16101561035857838160ff16602081106102fc576102fb610fe4565b5b1a60f81b828260ff168151811061031657610315610fe4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061035090611020565b9150506102da565b5080915050919050565b60606000825184516103749190610de2565b67ffffffffffffffff81111561038d5761038c610b31565b5b6040519080825280601f01601f1916602001820160405280156103bf5781602001600182028036833780820191505090505b50905060005b8451811015610441578481815181106103e1576103e0610fe4565b5b602001015160f81c60f81b8282815181106103ff576103fe610fe4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806104399061104a565b9150506103c5565b5b835185516104509190610de2565b8110156104d657838551826104659190611093565b8151811061047657610475610fe4565b5b602001015160f81c60f81b82828151811061049457610493610fe4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806104ce9061104a565b915050610442565b819250505092915050565b606060008251141561054257600067ffffffffffffffff81111561050857610507610b31565b5b6040519080825280601f01601f19166020018201604052801561053a5781602001600182028036833780820191505090505b509050610724565b6000604067ffffffffffffffff81111561055f5761055e610b31565b5b60405190808252806020026020018201604052801561058d5781602001602082028036833780820191505090505b5090506000816000815181106105a6576105a5610fe4565b5b602002602001019060ff16908160ff168152505060006001905060005b84518110156107045760008582815181106105e1576105e0610fe4565b5b602001015160f81c60f81b60f81c60ff16905060005b8360ff1681101561068e5761010085828151811061061857610617610fe4565b5b602002602001015160ff1661062d9190610d88565b826106389190610de2565b9150603a826106479190610f82565b85828151811061065a57610659610fe4565b5b602002602001019060ff16908160ff1681525050603a8261067b9190610fb3565b9150806106879061104a565b90506105f7565b505b60008111156106f257603a816106a69190610f82565b848460ff16815181106106bc576106bb610fe4565b5b602002602001019060ff16908160ff168152505082806106db90611020565b935050603a816106eb9190610fb3565b9050610690565b50806106fd9061104a565b90506105c3565b5061071f61071a610715848461085d565b61091d565b6109f0565b925050505b919050565b6060600082141561078957600067ffffffffffffffff81111561074f5761074e610b31565b5b6040519080825280601f01601f1916602001820160405280156107815781602001600182028036833780820191505090505b509050610858565b6000610100836107999190610f82565b60f81b90506000600167ffffffffffffffff8111156107bb576107ba610b31565b5b6040519080825280601f01601f1916602001820160405280156107ed5781602001600182028036833780820191505090505b509050818160008151811061080557610804610fe4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061085361084d610100866108489190610fb3565b610729565b82610362565b925050505b919050565b606060008260ff1667ffffffffffffffff81111561087e5761087d610b31565b5b6040519080825280602002602001820160405280156108ac5781602001602082028036833780820191505090505b50905060005b8360ff16811015610912578481815181106108d0576108cf610fe4565b5b60200260200101518282815181106108eb576108ea610fe4565b5b602002602001019060ff16908160ff1681525050808061090a9061104a565b9150506108b2565b508091505092915050565b60606000825167ffffffffffffffff81111561093c5761093b610b31565b5b60405190808252806020026020018201604052801561096a5781602001602082028036833780820191505090505b50905060005b83518110156109e6578381600186516109899190611093565b6109939190611093565b815181106109a4576109a3610fe4565b5b60200260200101518282815181106109bf576109be610fe4565b5b602002602001019060ff16908160ff168152505080806109de9061104a565b915050610970565b5080915050919050565b60606000825167ffffffffffffffff811115610a0f57610a0e610b31565b5b6040519080825280601f01601f191660200182016040528015610a415781602001600182028036833780820191505090505b50905060005b8351811015610af8576040518060600160405280603a81526020016110c8603a9139848281518110610a7c57610a7b610fe4565b5b602002602001015160ff1681518110610a9857610a97610fe4565b5b602001015160f81c60f81b828281518110610ab657610ab5610fe4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610af09061104a565b915050610a47565b5080915050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610b6982610b20565b810181811067ffffffffffffffff82111715610b8857610b87610b31565b5b80604052505050565b6000610b9b610b02565b9050610ba78282610b60565b919050565b600067ffffffffffffffff821115610bc757610bc6610b31565b5b610bd082610b20565b9050602081019050919050565b82818337600083830152505050565b6000610bff610bfa84610bac565b610b91565b905082815260208101848484011115610c1b57610c1a610b1b565b5b610c26848285610bdd565b509392505050565b600082601f830112610c4357610c42610b16565b5b8135610c53848260208601610bec565b91505092915050565b600060208284031215610c7257610c71610b0c565b5b600082013567ffffffffffffffff811115610c9057610c8f610b11565b5b610c9c84828501610c2e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610cdf578082015181840152602081019050610cc4565b83811115610cee576000848401525b50505050565b6000610cff82610ca5565b610d098185610cb0565b9350610d19818560208601610cc1565b610d2281610b20565b840191505092915050565b60006020820190508181036000830152610d478184610cf4565b905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d9382610d4f565b9150610d9e83610d4f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dd757610dd6610d59565b5b828202905092915050565b6000610ded82610d4f565b9150610df883610d4f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e2d57610e2c610d59565b5b828201905092915050565b600081905092915050565b6000610e4e82610ca5565b610e588185610e38565b9350610e68818560208601610cc1565b80840191505092915050565b6000610e80828a610e43565b9150610e8c8289610e43565b9150610e988288610e43565b9150610ea48287610e43565b9150610eb08286610e43565b9150610ebc8285610e43565b9150610ec88284610e43565b915081905098975050505050505050565b6000610ee58284610e43565b915081905092915050565b6000819050919050565b610f0381610ef0565b8114610f0e57600080fd5b50565b600081519050610f2081610efa565b92915050565b600060208284031215610f3c57610f3b610b0c565b5b6000610f4a84828501610f11565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f8d82610d4f565b9150610f9883610d4f565b925082610fa857610fa7610f53565b5b828206905092915050565b6000610fbe82610d4f565b9150610fc983610d4f565b925082610fd957610fd8610f53565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060ff82169050919050565b600061102b82611013565b915060ff82141561103f5761103e610d59565b5b600182019050919050565b600061105582610d4f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561108857611087610d59565b5b600182019050919050565b600061109e82610d4f565b91506110a983610d4f565b9250828210156110bc576110bb610d59565b5b82820390509291505056fe31323334353637383941424344454647484a4b4c4d4e505152535455565758595a6162636465666768696a6b6d6e6f707172737475767778797aa26469706673582212206a6c18b07569d512c0e8a57f7a3e0e184ccc6f33c28c075a0e4b1a82b1ee36bf64736f6c634300080a0033",
  "devdoc": {
    "author": "Martin Lundfall (martin.lundfall@gmail.com)",
    "kind": "dev",
    "methods": {
      "generateHash(string)": {
        "details": "generates the corresponding IPFS hash (in base 58) to the given string",
        "params": {
          "contentString": "The content of the IPFS object"
        },
        "returns": {
          "_0": "The IPFS hash in base 58"
        }
      }
    },
    "title": "verifyIPFS",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}